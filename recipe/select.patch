From 05f66adfe59223fde1cbce634fff5529c80ab76d Mon Sep 17 00:00:00 2001
From: Jan Janssen <jan-janssen@users.noreply.github.com>
Date: Fri, 28 Feb 2025 10:07:13 +0100
Subject: [PATCH] Add support for reading selective dynamics (#31)

* Add support for reading selective dynamics

* Format black

* [pre-commit.ci] auto fixes from pre-commit.com hooks

for more information, see https://pre-commit.ci

* update ASE

* fix write_poscar()

* [pre-commit.ci] auto fixes from pre-commit.com hooks

for more information, see https://pre-commit.ci

---------

Co-authored-by: pyiron-runner <pyiron@mpie.de>
Co-authored-by: pre-commit-ci[bot] <66853113+pre-commit-ci[bot]@users.noreply.github.com>
---
 .ci_support/environment-old.yml |  2 +-
 pyiron_vasp/vasp/structure.py   | 73 +++++++++++++++++++++++++------
 tests/vasp/test_structure.py    | 76 ++++++++++++++++++++-------------
 3 files changed, 107 insertions(+), 44 deletions(-)

diff --git a/.ci_support/environment-old.yml b/.ci_support/environment-old.yml
index 682f29d..d9af5cc 100644
--- a/.ci_support/environment-old.yml
+++ b/.ci_support/environment-old.yml
@@ -1,7 +1,7 @@
 channels:
 - conda-forge
 dependencies:
-- ase =3.22.1
+- ase =3.23.0
 - defusedxml =0.7.0
 - matplotlib-base =3.5.3
 - numpy =1.26.0
diff --git a/pyiron_vasp/vasp/structure.py b/pyiron_vasp/vasp/structure.py
index 2ce8ce3..74b44a3 100644
--- a/pyiron_vasp/vasp/structure.py
+++ b/pyiron_vasp/vasp/structure.py
@@ -5,6 +5,7 @@
 import os
 from collections import OrderedDict
 from ase.atoms import Atoms
+from ase.constraints import FixCartesian
 import numpy as np
 import warnings
 
@@ -125,7 +126,16 @@ def write_poscar(structure, filename="POSCAR", write_species=True, cartesian=Tru
         num_str = [str(val) for val in atom_numbers.values()]
         f.write(" ".join(num_str))
         f.write(endline)
-        if "selective_dynamics" in structure.get_tags():
+        if len(structure.constraints) > 0:
+            selective_dynamics = np.array([[True, True, True]] * len(structure))
+            for con in structure.constraints:
+                c = con.todict()
+                if c["name"] != "FixCartesian":
+                    raise ValueError(
+                        "Currently only FixCartesian is supported in write_poscar()."
+                    )
+                for ind in c["kwargs"]["a"]:
+                    selective_dynamics[ind] = np.invert(c["kwargs"]["mask"])
             selec_dyn = True
             cartesian = False
             f.write("Selective dynamics" + endline)
@@ -139,7 +149,7 @@ def write_poscar(structure, filename="POSCAR", write_species=True, cartesian=Tru
                 else:
                     sorted_coords.append(structure.get_scaled_positions()[i])
                 if selec_dyn:
-                    selec_dyn_lst.append(structure.selective_dynamics[i])
+                    selec_dyn_lst.append(selective_dynamics[i])
         if cartesian:
             f.write("Cartesian" + endline)
         else:
@@ -242,17 +252,54 @@ def atoms_from_string(string, read_velocities=False, species_list=None):
     except ValueError:
         atoms = _dict_to_atoms(atoms_dict, read_from_first_line=True)
     if atoms_dict["selective_dynamics"]:
-        selective_dynamics = np.array(selective_dynamics)
-        unique_sel_dyn, inverse, counts = np.unique(
-            selective_dynamics, axis=0, return_counts=True, return_inverse=True
-        )
-        count_index = np.argmax(counts)
-        # atoms.add_tag(selective_dynamics=unique_sel_dyn.tolist()[count_index])
-        # is_not_majority = np.arange(len(unique_sel_dyn), dtype=int) != count_index
-        # for i, val in enumerate(unique_sel_dyn):
-        #     if is_not_majority[i]:
-        #         for key in np.argwhere(inverse == i).flatten():
-        #             atoms.selective_dynamics[int(key)] = val.tolist()
+        constraints_dict = {
+            label: []
+            for label in ["TTT", "TTF", "FTT", "TFT", "TFF", "FFT", "FTF", "FFF"]
+        }
+        for i, val in enumerate(selective_dynamics):
+            if val[0] and val[1] and val[2]:
+                pass
+            elif val[0] and val[1] and not val[2]:
+                constraints_dict["TTF"].append(i)
+            elif not val[0] and val[1] and val[2]:
+                constraints_dict["FTT"].append(i)
+            elif val[0] and not val[1] and val[2]:
+                constraints_dict["TFT"].append(i)
+            elif val[0] and not val[1] and not val[2]:
+                constraints_dict["TFF"].append(i)
+            elif not val[0] and val[1] and not val[2]:
+                constraints_dict["FTF"].append(i)
+            elif not val[0] and not val[1] and val[2]:
+                constraints_dict["FFT"].append(i)
+            elif not val[0] and not val[1] and not val[2]:
+                constraints_dict["FFF"].append(i)
+            else:
+                raise ValueError("Selective Dynamics Error: " + str(val))
+
+        constraints_lst = []
+        for k, v in constraints_dict.items():
+            if len(v) > 0:
+                if k == "TTF":
+                    constraints_lst.append(FixCartesian(a=v, mask=(False, False, True)))
+                elif k == "FTT":
+                    constraints_lst.append(FixCartesian(a=v, mask=(True, False, False)))
+                elif k == "TFT":
+                    constraints_lst.append(FixCartesian(a=v, mask=(False, True, False)))
+                elif k == "TFF":
+                    constraints_lst.append(FixCartesian(a=v, mask=(False, True, True)))
+                elif k == "FTF":
+                    constraints_lst.append(FixCartesian(a=v, mask=(True, False, True)))
+                elif k == "FFT":
+                    constraints_lst.append(FixCartesian(a=v, mask=(True, True, False)))
+                elif k == "FFF":
+                    constraints_lst.append(FixCartesian(a=v, mask=(True, True, True)))
+                else:
+                    raise ValueError(
+                        "Selective Dynamics Error: " + str(k) + ": " + str(v)
+                    )
+
+        atoms.set_constraint(constraints_lst)
+
     if read_velocities:
         velocity_index = position_index + n_atoms + 1
         for i in range(velocity_index, velocity_index + n_atoms):
diff --git a/tests/vasp/test_structure.py b/tests/vasp/test_structure.py
index 54860d4..24a03ab 100644
--- a/tests/vasp/test_structure.py
+++ b/tests/vasp/test_structure.py
@@ -8,6 +8,7 @@
 import numpy as np
 
 from ase.atoms import Atoms
+from ase.constraints import FixCartesian
 from pyiron_vasp.vasp.structure import (
     read_atoms,
     write_poscar,
@@ -49,7 +50,7 @@ def test_atoms_from_string(self):
                     if "diff_species" in poscar_file:
                         for _ in range(10):
                             atoms = atoms_from_string(string=lines)
-                            # self.assertEqual(atoms.indices.tolist(), [0, 1, 2])
+                            self.assertEqual([a.index for a in atoms], [0, 1, 2])
                             self.assertEqual(
                                 " ".join(atoms.get_chemical_symbols()),
                                 " ".join(["Ca", "Mg", "Al"]),
@@ -86,34 +87,38 @@ def test_read_atoms(self):
                 atoms, velocities = read_atoms(filename=f, return_velocities=True)
                 self.assertEqual(len(atoms), 19)
                 self.assertEqual(np.shape(velocities), (19, 3))
-                # self.assertEqual(len(atoms.selective_dynamics), 19)
+                fixed_atoms, not_fixed_atoms = [], []
+                for con in atoms.constraints:
+                    c = con.todict()
+                    if np.all(c["kwargs"]["mask"]):
+                        fixed_atoms = c["kwargs"]["a"]
                 self.assertEqual(len(atoms.symbols.indices()["Mg"]), 10)
                 neon_indices = atoms.symbols.indices()["Ne"]
-                hydrogen_indices = atoms.symbols.indices()["H"]
-                oxygen_indices = atoms.symbols.indices()["O"]
+                magnesium_indices = atoms.symbols.indices()["Mg"]
                 truth_array = np.empty_like(atoms.positions[neon_indices], dtype=bool)
                 truth_array[:, :] = True
-                # sel_dyn = np.array(atoms.selective_dynamics)
-                # self.assertTrue(
-                #     np.array_equal(sel_dyn[neon_indices], np.logical_not(truth_array))
-                # )
-                truth_array = np.empty_like(atoms.positions[oxygen_indices], dtype=bool)
-                truth_array[:, :] = True
-                # self.assertTrue(np.array_equal(sel_dyn[oxygen_indices], truth_array))
-                # truth_array = np.empty_like(
-                #     atoms.positions[hydrogen_indices], dtype=bool
-                # )
-                truth_array[:, :] = True
-                # self.assertTrue(np.array_equal(sel_dyn[hydrogen_indices], truth_array))
+                self.assertTrue(
+                    np.array_equal(
+                        fixed_atoms, magnesium_indices.tolist() + neon_indices.tolist()
+                    ),
+                )
                 velocities_neon = np.zeros_like(np.array(velocities)[neon_indices])
-                # self.assertTrue(
-                #     np.array_equal(np.array(velocities)[neon_indices], velocities_neon)
-                # )
+                self.assertTrue(
+                    np.array_equal(np.array(velocities)[neon_indices], velocities_neon)
+                )
 
             if f.split("/")[-1] == "POSCAR_no_species":
                 atoms = read_atoms(filename=f)
                 self.assertEqual(len(atoms), 33)
-                # self.assertEqual(len(atoms.selective_dynamics), 33)
+                fixed_atoms = []
+                for con in atoms.constraints:
+                    c = con.todict()
+                    if np.all(c["kwargs"]["mask"]):
+                        fixed_atoms = c["kwargs"]["a"]
+                hidden_list_of_fixed_indices = [0, 29, 30, 31, 32]
+                self.assertTrue(
+                    np.array_equal(fixed_atoms, hidden_list_of_fixed_indices),
+                )
 
             elif f.split("/")[-1] != "POSCAR_spoilt":
                 atoms = read_atoms(filename=f)
@@ -157,9 +162,15 @@ def test_read_atoms(self):
                     truth_array[:] = [True, True, True]
                     truth_array[0] = [False, False, False]
                     truth_array[-4:] = [False, False, False]
-                    # self.assertTrue(
-                    #     np.array_equal(atoms.selective_dynamics, truth_array)
-                    # )
+                    fixed_atoms, not_fixed_atoms = [], []
+                    for con in atoms.constraints:
+                        c = con.todict()
+                        if np.all(c["kwargs"]["mask"]):
+                            fixed_atoms = c["kwargs"]["a"]
+                    hidden_list_of_fixed_indices = [0, 29, 30, 31, 32]
+                    self.assertTrue(
+                        np.array_equal(fixed_atoms, hidden_list_of_fixed_indices),
+                    )
 
     def test_write_poscar(self):
         write_poscar(
@@ -171,19 +182,24 @@ def test_write_poscar(self):
             self.structure.get_chemical_formula(), test_atoms.get_chemical_formula()
         )
         struct = self.structure.copy()
-        # struct.add_tag(selective_dynamics=[True, True, True])
+        struct.constraints = [
+            FixCartesian(a=list(range(len(struct))), mask=[False, False, False])
+        ]
         write_poscar(
             structure=struct, filename=posixpath.join(self.file_location, "POSCAR_test")
         )
         test_atoms = read_atoms(posixpath.join(self.file_location, "POSCAR_test"))
-        truth_array = np.empty_like(struct.positions, dtype=bool)
-        truth_array[:] = [True, True, True]
-        # self.assertTrue(
-        #     np.array_equal(test_atoms.selective_dynamics, truth_array)
-        # )
+        fixed_atoms = []
+        for con in test_atoms.constraints:
+            c = con.todict()
+            if np.all(c["kwargs"]["mask"]):
+                fixed_atoms = c["kwargs"]["a"]
+        self.assertEqual(len(fixed_atoms), 0)
         os.remove(posixpath.join(self.file_location, "POSCAR_test"))
         struct = self.structure.copy()
-        # struct.add_tag(selective_dynamics=[True, True, True])
+        struct.constraints = [
+            FixCartesian(a=list(range(len(struct))), mask=[False, False, False])
+        ]
         write_poscar(
             structure=struct,
             filename=posixpath.join(self.file_location, "POSCAR_test"),
