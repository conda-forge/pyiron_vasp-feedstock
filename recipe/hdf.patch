From c5b20ea329d7955b54506658871abc668b960fba Mon Sep 17 00:00:00 2001
From: Jan Janssen <jan-janssen@users.noreply.github.com>
Date: Fri, 28 Feb 2025 11:34:49 +0100
Subject: [PATCH] Remove all to_hdf() and from_hdf() functions (#34)

---
 pyiron_vasp/dft/volumetric.py       | 28 -------------------
 pyiron_vasp/vasp/output.py          | 26 +++++++++---------
 pyiron_vasp/vasp/parser/outcar.py   | 42 +++--------------------------
 pyiron_vasp/vasp/volumetric_data.py | 38 --------------------------
 4 files changed, 16 insertions(+), 118 deletions(-)

diff --git a/pyiron_vasp/dft/volumetric.py b/pyiron_vasp/dft/volumetric.py
index e36f988..5c95061 100644
--- a/pyiron_vasp/dft/volumetric.py
+++ b/pyiron_vasp/dft/volumetric.py
@@ -310,34 +310,6 @@ def get_average_along_axis(self, ind=2):
         else:
             return np.average(np.average(self._total_data, axis=0), 0)
 
-    def to_hdf(self, hdf, group_name="volumetric_data"):
-        """
-        Writes the data as a group to a HDF5 file
-
-        Args:
-            hdf (pyiron_base.generic.hdfio.ProjectHDFio): The HDF file/path to write the data to
-            group_name (str): The name of the group under which the data must be stored as
-
-        """
-        with hdf.open(group_name) as hdf_vd:
-            hdf_vd["TYPE"] = str(type(self))
-            hdf_vd["total"] = self.total_data
-
-    def from_hdf(self, hdf, group_name="volumetric_data"):
-        """
-        Recreating the VolumetricData instance by reading data from the HDF5 files
-
-        Args:
-            hdf (pyiron_base.generic.hdfio.ProjectHDFio): The HDF file/path to write the data to
-            group_name (str): The name of the group under which the data must be stored as
-
-        Returns:
-            pyiron.atomistics.volumetric.generic.VolumetricData: The VolumetricData instance
-
-        """
-        with hdf.open(group_name) as hdf_vd:
-            self._total_data = hdf_vd["total"]
-
     def write_cube_file(self, filename="cube_file.cube", cell_scaling=1.0):
         """
         Write the volumetric data into the CUBE file format
diff --git a/pyiron_vasp/vasp/output.py b/pyiron_vasp/vasp/output.py
index 6084081..dbf1020 100644
--- a/pyiron_vasp/vasp/output.py
+++ b/pyiron_vasp/vasp/output.py
@@ -344,28 +344,28 @@ def collect(
         self.generic_output.bands = self.electronic_structure
 
     def to_dict(self):
-        hdf5_output = {
+        output_dict = {
             "description": self.description,
             "generic": self.generic_output.to_dict(),
         }
 
         if self._structure is not None:
-            hdf5_output["structure"] = self.structure.to_dict()
+            output_dict["structure"] = self.structure.to_dict()
 
         if self.electrostatic_potential.total_data is not None:
-            hdf5_output["electrostatic_potential"] = (
+            output_dict["electrostatic_potential"] = (
                 self.electrostatic_potential.to_dict()
             )
 
         if self.charge_density.total_data is not None:
-            hdf5_output["charge_density"] = self.charge_density.to_dict()
+            output_dict["charge_density"] = self.charge_density.to_dict()
 
         if len(self.electronic_structure.kpoint_list) > 0:
-            hdf5_output["electronic_structure"] = self.electronic_structure.to_dict()
+            output_dict["electronic_structure"] = self.electronic_structure.to_dict()
 
         if len(self.outcar.parse_dict.keys()) > 0:
-            hdf5_output["outcar"] = self.outcar.to_dict_minimal()
-        return hdf5_output
+            output_dict["outcar"] = self.outcar.to_dict_minimal()
+        return output_dict
 
 
 class GenericOutput:
@@ -393,15 +393,15 @@ def bands(self, val):
         self._bands = val
 
     def to_dict(self):
-        hdf_go, hdf_dft = {}, {}
+        go_dict, dft_dict = {}, {}
         for key, val in self.log_dict.items():
-            hdf_go[key] = val
+            go_dict[key] = val
         for key, val in self.dft_log_dict.items():
-            hdf_dft[key] = val
-        hdf_go["dft"] = hdf_dft
+            dft_dict[key] = val
+        go_dict["dft"] = dft_dict
         if self.bands.eigenvalue_matrix is not None:
-            hdf_go["dft"]["bands"] = self.bands.to_dict()
-        return hdf_go
+            go_dict["dft"]["bands"] = self.bands.to_dict()
+        return go_dict
 
 
 class VaspCollectError(ValueError):
diff --git a/pyiron_vasp/vasp/parser/outcar.py b/pyiron_vasp/vasp/parser/outcar.py
index 79b25e5..f3dfce1 100644
--- a/pyiron_vasp/vasp/parser/outcar.py
+++ b/pyiron_vasp/vasp/parser/outcar.py
@@ -137,32 +137,8 @@ def from_file(self, filename="OUTCAR"):
         except IndexError:
             self.parse_dict["pressures"] = np.zeros(len(steps))
 
-    def to_hdf(self, hdf, group_name="outcar"):
-        """
-        Store output in an HDF5 file
-
-        Args:
-            hdf (pyiron_base.generic.hdfio.FileHDFio): HDF5 group or file
-            group_name (str): Name of the HDF5 group
-        """
-        with hdf.open(group_name) as hdf5_output:
-            for key in self.parse_dict.keys():
-                hdf5_output[key] = self.parse_dict[key]
-
-    def to_hdf_minimal(self, hdf, group_name="outcar"):
-        """
-        Store minimal output in an HDF5 file (output unique to OUTCAR)
-
-        Args:
-            hdf (pyiron_base.generic.hdfio.FileHDFio): HDF5 group or file
-            group_name (str): Name of the HDF5 group
-        """
-        with hdf.open(group_name) as hdf5_output:
-            for k, v in self.to_dict_minimal().items():
-                hdf5_output[k] = v
-
     def to_dict_minimal(self):
-        hdf5_output = {}
+        output_dict = {}
         unique_quantities = [
             "kin_energy_error",
             "broyden_mixing",
@@ -175,20 +151,8 @@ def to_dict_minimal(self):
         ]
         for key in self.parse_dict.keys():
             if key in unique_quantities:
-                hdf5_output[key] = self.parse_dict[key]
-        return hdf5_output
-
-    def from_hdf(self, hdf, group_name="outcar"):
-        """
-        Load output from an HDF5 file
-
-        Args:
-            hdf (pyiron_base.generic.hdfio.FileHDFio): HDF5 group or file
-            group_name (str): Name of the HDF5 group
-        """
-        with hdf.open(group_name) as hdf5_output:
-            for key in hdf5_output.list_nodes():
-                self.parse_dict[key] = hdf5_output[key]
+                output_dict[key] = self.parse_dict[key]
+        return output_dict
 
     def get_vasp_version(self, filename="OUTCAR", lines=None):
         return lines[0].lstrip().split(sep=" ")[0]
diff --git a/pyiron_vasp/vasp/volumetric_data.py b/pyiron_vasp/vasp/volumetric_data.py
index b61336e..8a6aed4 100644
--- a/pyiron_vasp/vasp/volumetric_data.py
+++ b/pyiron_vasp/vasp/volumetric_data.py
@@ -285,41 +285,3 @@ def to_dict(self):
         if self.diff_data is not None:
             volumetric_data_dict["diff"] = self.diff_data
         return volumetric_data_dict
-
-    def to_hdf(self, hdf, group_name="volumetric_data"):
-        """
-        Writes the data as a group to a HDF5 file
-
-        Args:
-            hdf (pyiron_base.generic.hdfio.ProjectHDFio): The HDF file/path to write the data to
-            group_name (str): The name of the group under which the data must be stored as
-
-        """
-        volumetric_data_dict_to_hdf(
-            data_dict=self.to_dict(),
-            hdf=hdf,
-            group_name=group_name,
-        )
-
-    def from_hdf(self, hdf, group_name="volumetric_data"):
-        """
-        Recreating the VolumetricData instance by reading data from the HDF5 files
-
-        Args:
-            hdf (pyiron_base.generic.hdfio.ProjectHDFio): The HDF file/path to write the data to
-            group_name (str): The name of the group under which the data must be stored as
-
-        Returns:
-            pyiron.atomistics.volumetric.generic.VolumetricData: The VolumetricData instance
-
-        """
-        with hdf.open(group_name) as hdf_vd:
-            self._total_data = hdf_vd["total"]
-            if "diff" in hdf_vd.list_nodes():
-                self._diff_data = hdf_vd["diff"]
-
-
-def volumetric_data_dict_to_hdf(data_dict, hdf, group_name="volumetric_data"):
-    with hdf.open(group_name) as hdf_vd:
-        for k, v in data_dict.items():
-            hdf_vd[k] = v
